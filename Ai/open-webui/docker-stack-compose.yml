
version: '3.9'

x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "1m"
    max-file: "1"
    tag: "{{.Name}}"

services:
  openWebUI:
    image: ghcr.io/open-webui/open-webui:main
    depends_on:
        - chromadb
        - redis
        # - ollama
    volumes:
      - /mnt/glusterfs/open-webui/data:/app/backend/data
    env_file:
      - .env
    environment:
      TZ: America/New_York
      ENABLE_WEBSOCKET_SUPPORT: 'true'
      WEBSOCKET_MANAGER: redis
      WEBSOCKET_REDIS_URL: redis://redis:6379/1
      GLOBAL_LOG_LEVEL: DEBUG
      DATA_DIR: /app/backend/data 
      OLLAMA_BASE_URL: http://ollama.your-domain.lan:11434
      CHROMA_HTTP_PORT: 8000
      CHROMA_HTTP_HOST: chromadb
      CHROMA_TENANT: default_tenant
      VECTOR_DB: chroma
      WEBUI_NAME: 'My Open-WebUI ChatBot'
      CORS_ALLOW_ORIGIN: "*" # This is the current Default, but handled by traefik CORS middleware
      RAG_EMBEDDING_ENGINE: ollama
      RAG_EMBEDDING_MODEL: nomic-embed-text-v1.5
      RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE: "True"
    networks:
      - backend
      - traefik-public
    # ports:
    #   - target: 8080
    #     published: 3000
    #     mode: overlay
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.labels.WIRED == YES # user your own constraints
      labels:
        - traefik.enable=true
        - traefik.swarm.network=traefik-public
        - traefik.http.routers.${ROUTER_NAME}.rule=Host(`${ROUTER_NAME}.${ROOT_DOMAIN}`)
        - traefik.http.routers.${ROUTER_NAME}.middlewares=chain-oauth@file
        - traefik.http.routers.${ROUTER_NAME}.service=${ROUTER_NAME}-svc
        - traefik.http.services.${ROUTER_NAME}-svc.loadbalancer.server.port=8080
        - traefik.constraint=traefik-public # cloudflared
    logging: *default-logging

  chromadb:
    hostname: chromadb
    image: chromadb/chroma:0.6.3
    volumes:
      - /mnt/glusterfs/open-webui/chromadb/data:/chroma/chroma
    environment:
      - TZ=America/New_York
      - IS_PERSISTENT=TRUE
      - ALLOW_RESET=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
    # ports:  # not needed with traefik 
    #   - target: 8000
    #     published: 8000
    #     mode: overlay
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.labels.WIRED == YES
    healthcheck: 
      test: ["CMD-SHELL", "curl localhost:8000/api/v1/heartbeat || exit 1"]
      interval: 10s
      retries: 2
      start_period: 5s
      timeout: 10s
    logging: *default-logging

  redis:
    image: docker.io/valkey/valkey:8.0.1-alpine
    # container_name: redis-valkey
    environment:
      TZ: America/New_York
      # PUID: ${PUID}
      # PGID: ${PGID}
    volumes:
      - /mnt/glusterfs/open-webui/redis-data:/data # might require 'chown -Rv 999:999'
    command: "valkey-server --save 30 1"
    healthcheck:
      test: "[ $$(valkey-cli ping) = 'PONG' ]"
      start_period: 5s
      interval: 1s
      timeout: 3s
      retries: 5
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.labels.WIRED == YES
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    networks:
      - backend
    logging: *default-logging

  pipelines:
    image: ghcr.io/open-webui/pipelines:main
    volumes:
      - /mnt/glusterfs/open-webui/pipelines:/app/pipelines
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.labels.WIRED == YES
    networks:
      - backend
    environment:
      - TZ=America/New_York
      - PIPELINES_API_KEY=0p3n-w3bu! # add to pipe line config via open-webui UI
    logging: *default-logging

  # RUN OLLAMA on Docker if needed
  # ollama:
  #   image: ollama/ollama:latest
  #   hostname: ollama
  #   ports:
  #     - target: 11434
  #       published: 11434
  #       mode: overlay
  #   deploy:
  #     resources:
  #       reservations:
  #         generic_resources:
  #           - discrete_resource_spec:
  #               kind: "NVIDIA-GPU"
  #               value: 0
  #     replicas: 1
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 3
  #   volumes:
  #     - ./data/ollama:/root/.ollama


networks:
  backend:
    name: ${BACKEND_NETWORK_NAME}
    external: true
  traefik-public:
    external: true
